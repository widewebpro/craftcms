# Digital Ocean DROPLETS

pipelines:

  branches:
    alpine:
    - step:
        name: Deploy to Registry
        image: digitalocean/doctl
        script:
         - export BUILD_ID=$BITBUCKET_COMMIT
         - export ENV= #env name
         - export REGISTRY_URL= #registry URL for container
         - docker login -u $DIGITALOCEAN_ACCESS_TOKEN -p $DIGITALOCEAN_ACCESS_TOKEN registry.digitalocean.com
         - docker build -f ./Dockerfile -t $REGISTRY_URL/$ENV:$BUILD_ID .
         - docker push $REGISTRY_URL/$ENV:$BUILD_ID
         #- docker tag $REGISTRY_URL/$ENV:$BUILD_ID $REGISTRY_URL/$ENV:latest
         #- docker push $REGISTRY_URL/$ENV:latest
        services:
         - docker

    - step:
        name: Test Deploy to droplet
        script:
        - export BUILD_ID=$BITBUCKET_COMMIT
        - export ENV= #env name
        - export IMAGE_NAME= #registry_URL/$ENV:$BUILD_ID
        - pipe: atlassian/ssh-run:0.2.2
          variables:
            SSH_USER: $SSH_USER
            SERVER: $SSH_SERVER
            COMMAND: >
              docker login -u $DIGITALOCEAN_ACCESS_TOKEN -p $DIGITALOCEAN_ACCESS_TOKEN registry.digitalocean.com &&
              docker stop $CONTAINERS_TO_STOP &&
              docker run -it -p 80:8080 -d $IMAGE_NAME
        services:
        - docker

# AWS Elastik beanstalk
# enable Docker for your repository
options:
  docker: true

pipelines:
  branches:
    develop:
      - step:
         name: "Install depencies and build"
         image: node:12.20.0
         script:
            - cd  app
            - apt update && apt install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
            - npm install
            - npm run build
         artifacts:
            - app/node_modules/**
            - app/web/public/**
            - app/templates/layout/main.twig
      - step:
          name: "Build docker image and push to ECR"
          image: tstrohmeier/awscli:3.6.4
          script:
            # aws login
            - eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            - export BUILD_ID=$BITBUCKET_BRANCH_$BITBUCKET_COMMIT_$BITBUCKET_BUILD_NUMBER
            - docker build -f ./Dockerfile -t ${AWS_REGISTRY_URL}:$BUILD_ID .
            - docker push ${AWS_REGISTRY_URL}:$BUILD_ID
            - docker tag ${AWS_REGISTRY_URL}:$BUILD_ID ${AWS_REGISTRY_URL}:latest
            - docker push ${AWS_REGISTRY_URL}:latest
          services:
            - docker
      - step:
              name: "Deployment to qa"
              image: coxauto/aws-ebcli
              deployment: qa
              script:
              - cd .devops/elastic-beanstalk/
              - sed -i'' -e "s;%BUILD_VERSION%;latest;g" ./Dockerrun.aws.json
              - DATE=`date +%Y-%m-%d--%H-%M-%S`
              - git add *
              - eb init -r ${AWS_DEFAULT_REGION} -p Docker-19.03.13-ce APP-NAME
              - eb deploy --staged -l cms-craft-$DATE ENV-NAME